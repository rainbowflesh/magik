package ${package}.controller;

import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import ${package}.model.${className};
import ${package}.service.${className}Service;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * ${comments}
 */
@RestController
@RequestMapping("/${classname}")
@Api(value = "/${classname}", description = "${comments}")
public class ${className}Controller {
    @Resource
    private ${className}Service ${classname}Service;

    /**
     * 分页
     */
@RequestMapping(value = "", method = RequestMethod.GET)
@ApiOperation(value = "返回分页数据，参数:page,record,sortName,sortType以及其他需要的查询条件")
        @ApiImplicitParams({
        @ApiImplicitParam(name = "page", paramType = "query", value = "分页参数，页码，从1开始，默认第1页", required = false, dataType = "String", defaultValue = "1"),
        @ApiImplicitParam(name = "rows", paramType = "query", value = "分页参数，每页记录数，默认10条", required = false, dataType = "String", defaultValue = "10"),
        @ApiImplicitParam(name = "sort", paramType = "query", value = "排序列名", required = false, dataType = "String"),
        @ApiImplicitParam(name = "order", paramType = "query", value = "排序类型", required = false, dataType = "String"),
#foreach ($column in $columns)
    #if(${column.attrname} !=${pk.attrname})
        #if($velocityCount == $columns.size())
            #if(${column.attrType}=='Date'||${column.attrType}=='Timestamp')
                    @ApiImplicitParam(name = "${column.attrname}Start", paramType = "query", value = "${column.comments}开始", required = false, dataType = "String", defaultValue = ""),
                    @ApiImplicitParam(name = "${column.attrname}End", paramType = "query", value = "${column.comments}结束", required = false, dataType = "String", defaultValue = "")})
            #else
            @ApiImplicitParam(name = "${column.attrname}", paramType = "query", value = "${column.comments}", required = false, dataType = "${column.attrType}", defaultValue = "")})
            #end
        #else
            #if(${column.attrType}=='Date'||${column.attrType}=='Timestamp')
            @ApiImplicitParam(name = "${column.attrname}Start", paramType = "query", value = "${column.comments}开始", required = false, dataType = "String", defaultValue = ""),
            @ApiImplicitParam(name = "${column.attrname}End", paramType = "query", value = "${column.comments}结束", required = false, dataType = "String", defaultValue = ""),
            #else
            @ApiImplicitParam(name = "${column.attrname}", paramType = "query", value = "${column.comments}", required = false, dataType = "${column.attrType}", defaultValue = ""),
            #end
        #end
    #end
#end
public void page(@RequestParam(name = "page", required = false) Integer page,
@RequestParam(name = "rows", required = false) Integer rows,
@RequestParam(name = "sort", required = false) String sort,
@RequestParam(name = "order", required = false) String order,
@RequestParam(required = false) Map<String, Object> condiction){
        this.${classname}Service.findPage(page,rows,sort,order,condiction);
        }

/**
     * 列表
     */
@RequestMapping(value = "/list", method = RequestMethod.GET)
@ApiOperation(value = "返回分页数据，参数:sortName,sortType以及其他需要的查询条件")
        @ApiImplicitParams({
        @ApiImplicitParam(name = "sort", paramType = "query", value = "排序列名", required = false, dataType = "String"),
        @ApiImplicitParam(name = "order", paramType = "query", value = "排序类型", required = false, dataType = "String"),
#foreach ($column in $columns)
    #if(${column.attrname} !=${pk.attrname})
        #if($velocityCount == $columns.size())
            #if(${column.attrType}=='Date'||${column.attrType}=='Timestamp')
                    @ApiImplicitParam(name = "${column.attrname}Start", paramType = "query", value = "${column.comments}开始", required = false, dataType = "String", defaultValue = ""),
                    @ApiImplicitParam(name = "${column.attrname}End", paramType = "query", value = "${column.comments}结束", required = false, dataType = "String", defaultValue = "")})
            #else
            @ApiImplicitParam(name = "${column.attrname}", paramType = "query", value = "${column.comments}", required = false, dataType = "${column.attrType}", defaultValue = "")})
            #end
        #else
            #if(${column.attrType}=='Date'||${column.attrType}=='Timestamp')
            @ApiImplicitParam(name = "${column.attrname}Start", paramType = "query", value = "${column.comments}开始", required = false, dataType = "String", defaultValue = ""),
            @ApiImplicitParam(name = "${column.attrname}End", paramType = "query", value = "${column.comments}结束", required = false, dataType = "String", defaultValue = ""),
            #else
            @ApiImplicitParam(name = "${column.attrname}", paramType = "query", value = "${column.comments}", required = false, dataType = "${column.attrType}", defaultValue = ""),
            #end
        #end
    #end
#end
public void list(
@RequestParam(name = "sort", required = false) String sort,
@RequestParam(name = "order", required = false) String order,
@RequestParam(required = false) Map<String, Object> condiction){
        this.${classname}Service.findList(sort,order,condiction);
        }

/**
 * 信息
 */
@RequestMapping(value = "/{${pk.attrname}}", method = RequestMethod.GET)
@ApiOperation(value = "根据id返回一条数据，参数:${pk.attrname}")
@ApiImplicitParam(name = "${pk.attrname}", value = "主键", required = true, dataType = "String")
public void info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        this.${classname}Service.findById(${pk.attrname});
        }

/**
 * 保存
 */
@RequestMapping(value = "", method = {RequestMethod.POST, RequestMethod.PUT})
@ApiOperation(value = "新增/修改", notes = "新增,修改")
@ApiImplicitParam(name = "${classname}", value = "${className}实体类", required = true, dataType = "${className}", defaultValue = "")
public void save(@RequestBody ${className} ${classname}){
        this.${classname}Service.save(${classname});
        }

/**
 * 批量或单条删除
 **/
@RequestMapping(value = "", method = RequestMethod.DELETE)
@ApiOperation(value = "批量或单条删除")
@ApiImplicitParam(name = "${pk.attrname}s", paramType = "query", value = "逗号分割的主键编号字符串", required = true, dataType = "object", defaultValue = "")
public void delete(@RequestBody(required = true) String ${pk.attrname}s){
        this.${classname}Service.del(${pk.attrname}s);
        }
        }